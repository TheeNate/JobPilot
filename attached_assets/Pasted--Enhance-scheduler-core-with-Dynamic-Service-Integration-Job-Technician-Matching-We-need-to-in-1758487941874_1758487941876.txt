**Enhance scheduler-core with Dynamic Service Integration & Job Technician Matching**

We need to integrate scheduler-core with external technician scheduling services and add dynamic service management capabilities.

**PART 1: Service Management UI**

Add a new "Services" tab to the dashboard with a service connection management interface:

**New Database Table:**
- `connected_services` table: id, service_name, service_url, service_type, status, created_at, updated_at

**UI Features:**
- **Services Management Page**: Add/edit/delete service connections
- **Service Cards**: Show service name, URL, type, and live status (green/red indicator)
- **Add Service Form**: Service name, URL input, service type dropdown
- **Test Connection Button**: Ping the service `/api/health` endpoint to verify connectivity
- **Environment Variable Sync**: When services are added/updated, sync to environment variables

**API Endpoints:**
- `GET /api/services` - List all connected services
- `POST /api/services` - Add new service connection
- `PUT /api/services/:id` - Update service connection
- `DELETE /api/services/:id` - Remove service connection
- `POST /api/services/:id/test` - Test service connectivity

**PART 2: Job Technician Matching Integration**

Modify the Jobs table to add technician matching functionality:

**UI Changes:**
- **Add hamburger menu button** between Status and Actions columns in each job row
- **Expandable dropdown**: When clicked, dropdown expands below that row (pushes other rows down)
- **Loading state**: Show spinner while fetching technician matches
- **Results display**: Show matched technicians with name, availability status, certifications, contact info

**Integration Logic:**
- Extract job requirements from the job data (date, certifications needed from job description)
- Call the first available "Technician Matching" service from connected services
- API call: `POST {service_url}/api/match-technicians` with payload:
  ```json
  {
    "jobStartDate": "job-date-from-row",
    "jobEndDate": "job-date-from-row", 
    "requiredCertifications": ["extracted-from-job-description"]
  }
  ```

**Dropdown Content:**
- **Header**: "Available Technicians for [Job Location]"
- **Technician Cards**: Name, status, certifications badges, phone/email
- **No Results State**: "No available technicians found" with suggestion to adjust requirements
- **Error State**: "Service unavailable" with retry button

**PART 3: Technical Requirements**

- **Environment Variable Management**: Services stored in DB should sync to process.env for easy access
- **Error Handling**: Graceful fallback if technician service is down
- **Responsive Design**: Dropdown should work on mobile/tablet
- **Real-time Status**: Health check connected services periodically
- **Default Service**: Pre-populate with technician-base service URL if available

**Key Integration Points:**
- Use existing shadcn/ui components for consistency
- Follow current table design patterns for the expandable rows
- Add proper loading states and error boundaries
- Make service management feel native to the existing dashboard

Start with the Services management page, then add the job integration. The goal is making scheduler-core a true coordination platform that can connect to multiple craft services dynamically.